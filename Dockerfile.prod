# syntax=docker/dockerfile:1

# Define Ruby version
ARG RUBY_VERSION=3.2.2
# Base stage for shared environment setup
FROM ruby:$RUBY_VERSION-slim AS base

# Setup environment variables
ENV RAILS_ENV=production \
    RAILS_LOG_TO_STDOUT=true \
    RAILS_SERVE_STATIC_FILES=true \
    BUNDLE_PATH=/gems \
    BUNDLE_WITHOUT=development:test \
    GEM_HOME=/gems

# Install system dependencies required for Rails and SQLite3
RUN apt-get update -qq && apt-get install -y --no-install-recommends \
    build-essential \
    libsqlite3-dev \
    sqlite3 \
    git \
    tzdata \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Build stage to install gems and remove unneeded files
FROM base AS builder

# Install Gems
COPY Gemfile* /app/
RUN bundle config set --local without 'development test' \
    && bundle install --jobs 4 --retry 3

# Copy application code and precompile assets
COPY . /app

# Precompile assets. Use dummy SECRET_KEY_BASE for the assets:precompile task
RUN SECRET_KEY_BASE=dummy_key_base RAILS_ENV=production bundle exec rake assets:precompile

# Remove folders not needed in final image to make it slimmer
RUN rm -rf node_modules tmp/cache app/assets lib/assets spec

# Final production image
FROM base AS production

# Copy the gems from the builder stage
COPY --from=builder /gems /gems

# Copy the precompiled assets and the app code from the builder stage
COPY --from=builder /app /app

# Create a user and group with a specific ID to run the app. It's considered a good practice for security.
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser appuser

# Change ownership to the non-root user
RUN chown -R appuser:appuser /app
USER appuser

EXPOSE 3000

# Start the Rails app
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
